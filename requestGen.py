import sys
import requests
from bs4 import BeautifulSoup

#requestGen
#B00077920 Emma Delaney
#A number of functions to make requests to and process responses from web pages


#Make both GET and POST requests to a url with a set of parameters (or none)
#If the search string is present in the response, return True (a success)
#If not, return False (attack failed)
def find_string(url, search_string, req_params = None):
    #If there are no paremeters, just check the page for the string
    if(req_params == None):
        page_get = requests.get(url)
        if(search_string in page_get.text):
            return True
        else:
            return False
    #GET test with the given parameters
    page_get = requests.get(url, req_params)
    if(search_string in page_get.text):
        return True

    #POST test with given parameters
    page_post = requests.post(url, req_params)
    if(search_string in page_post.text):
        return True

    return False

#Get all of the forms in the page at the url passed by their <form> tags
def find_forms(url):
    page = requests.get(url)
    soup = BeautifulSoup(page.text, 'html.parser')
    forms = soup.findAll('form')
    return forms

#Find all of the <input> fields, textareas and select boxes in the page
#found at the given url
def find_inputs(url):
    forms = find_forms(url)
    inputs = []
    for form in forms:
        inputs += form.find_all('input')
        inputs += form.find_all('textarea')
        inputs += form.findAll('select')
    return inputs

#Create a dictionary of { name: default_value} key: value pairs
#from the input fields found at the passed in url
def get_fields(url):
    #start with a list of all things found, all_inputs,
    #add only the good ones to a final list, inputs
    all_inputs = find_inputs(url)
    inputs = []
    fields = {}
    val = ''
    #check that each field that's an <input> is a 'text', 'password', 'submit',
    # 'radio' or 'hidden'  and has a 'name'
    for inp in all_inputs:
        if inp.name == 'input':
            if (inp['type'] in ('text', 'password', 'submit', 'radio', 'hidden')) and inp.has_attr('name'):
                #if it is a radio button, make sure there are no duplicates in the list
                if inp['type'] == 'radio':
                    if inp['name'] in fields:
                        break
                inputs.append(inp)
        #add all the textareas and selects
        if inp.name in ('textarea', 'select') and inp.has_attr('name'):
            inputs.append(inp)
    #Witht eh final list of input, generate a dictionary of {name: default}s
    for inp in inputs:
        if inp.has_attr('value'):
            val = inp['value']
        fields[inp['name']] = val
        val = ''
    return fields

#Make a list of test parameters for a given url using a given 'payload' string
def gen_req_params(url, payload):
    #get the name: default values dictionary of fields at the url
    fields = get_fields(url)
    #req_params will be a list of dictionaries
    req_params = []
    #for every field in the page, add a parameter dictionary where only
    #that field is the payload string, and all others are their defaults
    for fieldk, fieldv in fields.items():
        #make a dictionary with a copy of all fields
        params = fields.copy()
        #make the value at the current fieldname the payload string
        params[fieldk] = payload
        #add the new dictionary to the array of dictionaries
        req_params.append(params)
    return req_params
