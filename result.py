import datetime

#A class containing information about a result of a test, the url, attack type,
#success and time of the test, with functions to create itself and return a formatted
#string representation of itself
class Result:
    url = ''
    attack = ''
    success = False
    time = ''

    #Create a new result from the given url, attack type and success
    def __init__(self, url, attack, success):
        self.url = url
        self.attack = attack
        self.success = success
        #set the time to the current time in year-month-day hour:minute format
        now = datetime.datetime.now()
        self.time = now.strftime("%Y-%m-%d %H:%M")

    #build a return a standardised string representation of the result
    def to_string(self):
        if len(self.url) < 71:
            string = '{0} {1} {2} {3}'.format(
                        self.time.ljust(20), self.url.ljust(80), self.attack.ljust(30),
                        'success +' if self.success else 'fail    -')
        else:
            #if the url is very long, write it on multiple lines so the table
            #created for a result set is not thrown off by a long url
            urlstrings = []
            url = self.url
            while url:
                urlstrings.append(url[:70])
                url = url[70:]

            string = '{0} {1} {2} {3}'.format(
                            self.time.ljust(20), urlstrings[0].ljust(80), self.attack.ljust(30),
                            'success +' if self.success else 'fail    -')
            del urlstrings[0]
            for u in urlstrings:
                string += '\n' + ' '*21 + u
        return string
